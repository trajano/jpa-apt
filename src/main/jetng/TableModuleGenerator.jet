<%@ jet class="TableModuleGenerator" package="net.trajano.apt.jpa.internal" argumentsClass="MetaTableModule" %>
package <%=arguments.getPackageName()%>;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;

/**
 * Stateless session bean to manage {@link <%=arguments.getEntityClassName()%>}
 * using the table module design pattern.
 */
@Stateless
public class <%=arguments.getClassName()%> {
    /**
     * Entity manager.
     */
    @PersistenceContext
    private EntityManager em;

    /**
     * Gets a specific record.
     * 
     * @param id
     *            primary key
     * @return persisted bean
     */
    public <%=arguments.getEntityClassName()%> get(final <%=arguments.getIdType()%> id) {
        return em.find(<%=arguments.getEntityClassName()%>.class, id);
    }

<%+ for (final MetaNamedQuery namedQuery : arguments.getNamedQueries()) { %>
    /**
     * Execute named query <%=namedQuery.getName()%>.
<%+ for (int i = 0 ; i < namedQuery.getParameters().size(); ++i) { %>
     * @param <%=namedQuery.getParameters().get(i)%> <%=namedQuery.getParameters().get(i)%> 
<%- } %>
     * @return list of <%=arguments.getEntityClassName()%>
     */
    public List<<%=arguments.getEntityClassName()%>> <%=namedQuery.getMethodName()%>(<%+ for (int i = 0 ; i < namedQuery.getParameters().size(); ++i) { %>final Object <%=namedQuery.getParameters().get(i)%><%+ if (i < namedQuery.getParameters().size() - 1) { %>,<%- } %><%- } %>) {
        return em
                .createNamedQuery("<%=namedQuery.getName()%>",
                        <%=arguments.getEntityClassName()%>.class)
                .setFlushMode(FlushModeType.AUTO)
<%+ for (int i = 0 ; i < namedQuery.getParameters().size(); ++i) { %>
                .setParameter("<%=namedQuery.getParameters().get(i)%>", <%=namedQuery.getParameters().get(i)%>) 
<%- } %>
                .getResultList();
    }

<%- } %>
<%+ for (final MetaOperation operation: arguments.getExtraOperations()) { %>
    /**
     * Execute extra operation <%=operation.getMethodName()%>.
<%+ for (int i = 0 ; i < operation.getParameterNames().size(); ++i) { %>
     * @param <%=operation.getParameterNames().get(i)%> <%=operation.getParameterNames().get(i)%> 
<%- } %>
     * @return <%=operation.getReturnType()%> 
     */
    public <%=operation.getReturnType()%> <%=operation.getMethodName()%>(<%+ for (int i = 0 ; i < operation.getParameterDeclarations().size(); ++i) { %><%=operation.getParameterDeclarations().get(i)%><%+ if (i < operation.getParameterDeclarations().size() - 1) { %>,<%- } %><%- } %>)
<%+ if (!operation.getThrownTypes().isEmpty()) {%>
      throws <%+ for (int i = 0 ; i < operation.getThrownTypes().size(); ++i) { %><%=operation.getThrownTypes().get(i)%><%+ if (i < operation.getThrownTypes().size() - 1) { %>,<%- } %><%- } %>
<%- } %>
    {
<%+ if (!"void".equals(operation.getReturnType())) {%>
        return 
<%- } %>
        <%=arguments.getEntityClassName()%>.<%=operation.getMethodName()%>(em<%+ for (int i = 0 ; i < operation.getParameterNames().size(); ++i) { %>, <%=operation.getParameterNames().get(i) %><%- } %>);
    }

<%- } %>
    /**
     * Save, flush and refresh a persisted bean. The flush and refreshing is
     * needed to ensure that the temporal data contains the proper values.
     * 
     * @param bean
     *            bean to persist
     */
    public void save(final <%=arguments.getEntityClassName()%> bean) {
        em.persist(bean);
        em.flush();
        em.refresh(bean);
    }

    /**
     * Removes the bean from the persistence.
     * 
     * @param bean
     *            bean to remove
     */
    public void remove(final <%=arguments.getEntityClassName()%> bean) {
        em.persist(bean);
        em.flush();
    }

    /**
     * Injects the entity manager for testing.
     * 
     * @param entityManager
     *            entity manager
     */
    public void setEntityManager(final EntityManager entityManager) {
        em = entityManager;
    }
}
